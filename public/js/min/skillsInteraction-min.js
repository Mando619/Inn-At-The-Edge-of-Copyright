let juggledItem,numbers={0:["zero","0"],1:["one","1"],2:["two","2"],3:["three","3"],4:["four","4"],5:["five","5"],6:["six","6"],7:["seven","7"],8:["eight","8"],9:["nine","9"],10:["ten","10"],11:["eleven","11"],12:["twelve","12"],13:["thirteen",13],14:["fourteen","14"],15:["fifteen","15"],16:["sixteen","16"],17:["seventeen","17"],18:["eighteen","18"],19:["nineteen","19"],20:["twenty","20"],50:["fifty","50"],100:["one hundred","100"]},juggleTime=!1;function juggle(e){e.split(" ").length<3&&logThis("How many, and what, are you trying to juggle?");let t=(e=takeTheseOffThat(actionCalls.juggle,e)).split(" ")[0],n=e.replace(`${t} `,"");for(prop in numbers)if(numbers[prop].includes(t.toLowerCase())){if(!("number"==typeof(t=parseInt(prop))&&t>2))return logThis(`How many ${n} are you trying to juggle?`),!1;getInventory(currentUserId).then(e=>{findMatchByItemName(pluralize(n,1),e).then(e=>{if(2*currentUserData.DEX/t**2<2)logThis("That may be too many objects for you to juggle.");else{if(!(e&&e.quantity>=t))return logThis(`You don't have ${t} ${n} to juggle!`),!1;publishDescription(`starts juggling ${t} ${n}.`),juggledItem=pluralize(n,1),setTimeout(continueJuggle(t,n),4e3)}})});break}}function chancesOfSuccessJuggling(e,t){Math.floor(10*Math.random())>2*e/t**2&&stopJuggling(!0)}function continueJuggle(e,t){juggleTime=setInterval(function(){publishDescription(`juggles ${e} ${t}.`),chancesOfSuccessJuggling(currentUserData.DEX,e)},4e3)}function stopJuggling(e){clearInterval(juggleTime),juggleTime?(e?(publishDescription(`drops their ${pluralize(juggledItem,3)} and scrambles around after them.`),incrementStat("DEX",.25,currentUserData.characterName)):publishDescription("stops juggling."),juggleTime=!1):logThis("You're not juggling!")}